"""
Analysis result data models for LocalInsightEngine.
"""

from datetime import datetime
from typing import List, Optional, Dict, Any
from uuid import UUID, uuid4

from pydantic import BaseModel, Field


class Insight(BaseModel):
    """An insight generated by the analysis engine."""
    
    id: UUID = Field(default_factory=uuid4)
    title: str
    content: str
    confidence: float = Field(ge=0.0, le=1.0)
    category: str  # "pattern", "contradiction", "synthesis", etc.
    
    # Supporting evidence (references to neutralized chunks)
    supporting_chunk_ids: List[UUID] = Field(default_factory=list)
    related_entities: List[str] = Field(default_factory=list)
    
    created_at: datetime = Field(default_factory=datetime.now)
    
    class Config:
        """Pydantic configuration."""
        json_encoders = {
            UUID: str,
            datetime: lambda v: v.isoformat()
        }


class Question(BaseModel):
    """A follow-up question generated by the analysis engine."""
    
    id: UUID = Field(default_factory=uuid4)
    question: str
    context: str
    question_type: str  # "clarification", "expansion", "verification"
    priority: int = Field(ge=1, le=5)  # 1=low, 5=high priority
    
    # References to relevant content
    relevant_chunk_ids: List[UUID] = Field(default_factory=list)
    
    created_at: datetime = Field(default_factory=datetime.now)
    
    class Config:
        """Pydantic configuration."""
        json_encoders = {
            UUID: str,
            datetime: lambda v: v.isoformat()
        }


class AnalysisResult(BaseModel):
    """
    Complete analysis result from Layer 3 (analysis_engine).
    
    Contains insights, patterns, and questions derived from the neutralized text,
    without any direct quotes or copyright-protected content.
    """
    
    id: UUID = Field(default_factory=uuid4)
    source_processed_text_id: UUID
    
    # Analysis outputs
    insights: List[Insight] = Field(default_factory=list)
    questions: List[Question] = Field(default_factory=list)
    
    # High-level analysis
    main_themes: List[str] = Field(default_factory=list)
    key_relationships: Dict[str, List[str]] = Field(default_factory=dict)
    contradictions: List[str] = Field(default_factory=list)
    
    # Summary and synthesis
    executive_summary: str = ""
    knowledge_gaps: List[str] = Field(default_factory=list)
    recommendations: List[str] = Field(default_factory=list)
    
    # Analysis metadata
    analysis_model: str = ""
    analysis_timestamp: datetime = Field(default_factory=datetime.now)
    processing_time_seconds: float = 0.0
    
    # Quality metrics
    confidence_score: float = Field(default=0.0, ge=0.0, le=1.0)
    completeness_score: float = Field(default=0.0, ge=0.0, le=1.0)
    
    def get_insights_by_category(self, category: str) -> List[Insight]:
        """Get insights filtered by category."""
        return [insight for insight in self.insights if insight.category == category]
    
    def get_high_priority_questions(self, min_priority: int = 4) -> List[Question]:
        """Get questions with priority >= min_priority."""
        return [q for q in self.questions if q.priority >= min_priority]
    
    def get_insights_above_confidence(self, min_confidence: float = 0.7) -> List[Insight]:
        """Get insights with confidence >= min_confidence."""
        return [insight for insight in self.insights if insight.confidence >= min_confidence]
    
    class Config:
        """Pydantic configuration."""
        json_encoders = {
            UUID: str,
            datetime: lambda v: v.isoformat()
        }